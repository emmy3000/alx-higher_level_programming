"""
Module: `1-my_list`

Test cases for the MyList subclass in 1-my_list

Import the `MyList` class from the module:
>>> MyList = __import__('1-my_list').MyList

Check for module docstring:
>>> len(__import__('1-my_list').__doc__) > 1
True

Check for class docstring:
>>> len(MyList.__doc__) > 1
True

Check for method docstring:
>>> len(MyList.print_sorted.__doc__) > 1
True

Check that `MyList` inherits from `list`:
>>> issubclass(MyList, list)
True

Create an empty `MyList` object and verify that `print_sorted` method returns an empty list:
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

Append integers to the `MyList` object and verify that the object stores only integers:
>>> my_list.append(2)
>>> my_list.append(4)
>>> my_list.append(-1)
>>> my_list.append(10)
>>> try:
...     my_list.append("hello")
... except TypeError:
...     pass
... else:
...     raise AssertionError("Expected TypeError")

Verify that the `print_sorted` method sorts the list in ascending order:
>>> my_list = MyList([3, 1, -2, 5])
>>> my_list.print_sorted() == [-2, 1, 3, 5]
True

Verify that the original list remains unsorted after calling `print_sorted`:
>>> my_list == [3, 1, -2, 5]
True

Append more integers to the `MyList` object and verify that `print_sorted` method sorts the list in ascending order:
>>> my_list.append(0)
>>> my_list.append(7)
>>> my_list.print_sorted() == [-2, 0, 1, 3, 5, 7]
True

Create a new `MyList` object with negative integers and verify that `print_sorted` method sorts the list in ascending order:
>>> my_list = MyList([-7, -3, -5, -1])
>>> my_list.print_sorted() == [-7, -5, -3, -1]
True

Verify that `print_sorted` method raises TypeError when passed an argument:
>>> try:
...     my_list.print_sorted(1)
... except TypeError:
...     pass
... else:
...     raise AssertionError("Expected TypeError")

"""
