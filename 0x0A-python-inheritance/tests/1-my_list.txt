The ``1-my_list`` module
======================

USES: ``MyList``
================

Importing function from the module:
	>>> MyList = __import__("1-my_list").MyList

::

Check for module docstring:
	>>> m = __import__("1-my_list").__doc__
	>>> len(m) > 1
	True

::

Check for class docstring:
	>>> c = __import__("1-my_list").MyList.__doc__
	>>> len(c) > 1
	True

::

Check for method docstring:
	>>> mod = __import__.("1-my_list").MyList.print_sorted.__doc__
	>>> len(mod) > 1
	True

::

Check that MyList inherits from list:
	>>> issubclass(MyList, list)
	True
::

Check for empty list:
	>>> l = MyList()
	>>> l.print_sorted()
	True

::

Checking that appending works:
	>>> l.append(2)
	>>> l.append(1)
	>>> assert l.print_sorted() == [1, 2]

::

Checking for list already in correct order:
	>>> l = MyList([1, 2, 3])
	>>> assert l.print_sorted() == [1, 2, 3]

::

Checking for reversed order list:
	>>> l = MyList([3, 2, 1])
	>>> assert l.print_sorted() == [1, 2, 3]

::

Checking for one negative number:
	>>> l = MyList([2, 1, -1, 5])
	>>> assert l.print_sorted() == [-1, 1, 2, 5]

::

Checking for all negative numbers:
	>>> l = MyList([-10, -1, -7, -2, -8])
	>>> assert l.print_sorted() == [-10, -8, -7, -2, -1]

::

Checking for too many arguments:
	>>> try:
	...     l.print_sorted(1)
	... except TypeError:
	...     pass
	... else:
	...     raise AssertionError("Expected TypeError")
